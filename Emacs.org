#+property: header-args:emacs-lisp :tangle config.el
#+TITLE: Emacs Configuration
#+property: header-args :mkdirp yes :comments no
#+STARTUP: fold

I use the Doom Emacs distribution. This way I don't have to worry about every
little thing and I can concentrate on the fun stuff.

Org-babel-tangle will generate the $DOOMDIR/{init.el, package.el, config.el}
files every time we save the file or call =M-x org-babel-tangle= manually.

* INIT.el
#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-


;; DO NOT EDIT THIS FILE! The configuration is done in Emacs.org.


(doom! :input
       ;;chinese
       ;;japanese
       ;;layout               ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe)  ; the ultimate code completion backend
       ;;helm                 ; the *other* search engine for love and life
       ;;ido                  ; the other *other* search engine...
       ;;(ivy +fuzzy +icons +prescient) ; a search engine for love and life
       vertico                ; the search engine of the future


       :ui
       ;;deft                 ; notational velocity for Emacs
       doom                   ; what makes DOOM look the way it does
       ;;doom-dashboard         ; a nifty splash screen for Emacs
       ;;doom-quit            ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column            ; a `fill-column' indicator
       ;;hl-todo                ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides        ; highlighted indent columns
       ;;(ligatures)            ; ligatures and symbols to make your code pretty again
       ;;minimap              ; show a map of the code on the side
       (modeline +light)      ; snazzy, Atom-inspired modeline, plus API
       nav-flash              ; blink cursor line after big motions
       ;;neotree              ; a project drawer, like NERDTree for vim
       ophints                ; highlight the region an operation acts on
       (popup +defaults)      ; tame sudden yet inevitable temporary windows
       ;;tabs                 ; a tab bar for Emacs
       ;;treemacs               ; a project drawer, like neotree but cooler
       ;;unicode              ; extended unicode support for various languages
       ;;vc-gutter              ; vcs diff in the fringe
       ;;vi-tilde-fringe        ; fringe tildes to mark beyond EOB
       ;;window-select        ; visually switch windows
       ;;workspaces             ; tab emulation, persistence & separate workspaces
       ;;zen                  ; distraction-free coding or writing

       :editor
       (evil +everywhere)     ; come to the dark side, we have cookies
       file-templates         ; auto-snippets for empty files
       fold                   ; (nigh) universal code folding
       format                 ; automated prettiness
       ;;god                  ; run Emacs commands without modifier keys
       ;;lispy                ; vim for lisp, for people who don't like vim
       ;;multiple-cursors       ; editing in many places at once
       ;;objed                ; text object editing for the innocent
       ;;parinfer             ; turn lisp into python, sort of
       ;;rotate-text          ; cycle region at point between text candidates
       ;;snippets               ; my elves. They type so I don't have to
       word-wrap              ; soft wrapping with language-aware indent

       :emacs
       dired                  ; making dired pretty [functional]
       electric               ; smarter, keyword-based electric-indent
       ibuffer                ; interactive buffer management
       (undo +tree)           ; persistent, smarter undo for your inevitable mistakes
       vc                     ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell                 ; the elisp shell that works everywhere
       ;;shell                ; simple shell REPL for Emacs
       ;;term                 ; basic terminal emulator for Emacs
       ;;vterm                  ; the best terminal emulation in Emacs

       :checkers
       ;;syntax               ; tasing you for every semicolon you forget
       ;;(spell +aspell)        ; tasing you for misspelling mispelling
       ;;grammar              ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger             ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig         ; let someone else argue about tabs vs spaces
       ;;ein                  ; tame Jupyter notebooks with emacs
       ;;(eval +overlay)        ; run code, run (also, repls)
       ;;gist                 ; interacting with github gists
       ;;lookup                 ; navigate your code and its documentation
       ;;(lsp +peek)
       magit                  ; a git porcelain for Emacs
       ;;make                 ; run make tasks from Emacs
       ;;pass                 ; password manager for nerds
       ;;pdf                    ; pdf enhancements
       ;;prodigy              ; FIXME managing external services & code builders
       ;;rgb                  ; creating color strings
       ;;taskrunner           ; taskrunner for all your projects
       ;;terraform            ; infrastructure as code
       ;;tmux                 ; an API for interacting with tmux
       ;;upload               ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)   ; improve compatibility with macOS
       ;;tty                  ; improve the terminal Emacs experience

       :lang
       ;;agda                 ; types of types of types of types...
       ;;cc                   ; C/C++/Obj-C madness
       ;;clojure              ; java with a lisp
       ;;common-lisp          ; if you've seen one lisp, you've seen them all
       ;;coq                  ; proofs-as-programs
       ;;crystal              ; ruby at the speed of c
       ;;csharp               ; unity, .NET, and mono shenanigans
       ;;data                 ; config/data formats
       ;;(dart +flutter +lsp) ; paint ui and not much else
       ;;elixir               ; erlang done right
       ;;elm                  ; care for a cup of TEA?
       ;;emacs-lisp             ; drown in parentheses
       ;;erlang               ; an elegant language for a more civilized age
       ;;ess                  ; emacs speaks statistics
       ;;faust                ; dsp, but you get to keep your soul
       ;;fsharp               ; ML stands for Microsoft's Language
       ;;fstar                ; (dependent) types and (monadic) effects and Z3
       ;;gdscript             ; the language you waited for
       ;;(go +lsp)            ; the hipster dialect
       ;;(haskell +dante)     ; a language that's lazier than I am
       ;;hy                   ; readability of scheme w/ speed of python
       ;;idris                ;
       ;;json                 ; At least it ain't XML
       ;;(java +meghanada)    ; the poster child for carpal tunnel syndrome
       ;;(javascript +lsp)      ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia                ; a better, faster MATLAB
       ;;kotlin               ; a better, slicker Java(Script)
       ;;latex                ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger               ; an accounting system in Emacs
       ;;lua                  ; one-based indices? one-based indices
       ;;markdown               ; writing docs for people to ignore
       ;;nim                  ; python + lisp at the speed of c
       ;;nix                  ; I hereby declare "nix geht mehr!"
       ;;ocaml                ; an objective camel
       org                    ; organize your plain life in plain text
       ;;(php +lsp)           ; perl's insecure younger brother
       ;;plantuml             ; diagrams for confusing people more
       ;;purescript           ; javascript, but functional
       ;;python               ; beautiful is better than ugly
       ;;qt                   ; the 'cutest' gui framework ever
       ;;racket               ; a DSL for DSLs
       ;;raku                 ; the artist formerly known as perl6
       ;;rest                 ; Emacs as a REST client
       ;;rst                  ; ReST in peace
       ;;(ruby +rails)        ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust                 ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala                ; java, but good
       ;;(scheme +guile)               ; a fully conniving family of lisps
       ;;sh                     ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity             ; do you need a blockchain? No.
       ;;swift                ; who asked for emoji variables?
       ;;terra                ; Earth and Moon in alignment for performance.
       ;;web                  ; the tubes
       ;;yaml                   ; JSON, but readable

       :email
       ;;mu4e
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc                  ; how neckbeards socialize
       ;;(rss +org)             ; emacs as an RSS reader
       ;;twitter              ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+END_SRC
* PACKAGES.el
Custom packages for which there is no embedding in Doom Emacs yet.
#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-


;; DO NOT EDIT THIS FILE! The configuration is done in Emacs.org.


(package! key-chord)
;;(package! lsp-treemacs)
(package! visual-fill-column)
;;(package! org-bullets)
(package! evil-matchit)
;;(package! mixed-pitch)
;;(package! tree-sitter)
;;(package! tree-sitter-langs)
(package! git-auto-commit-mode)
;;(package! mixed-pitch)
;;(package! anki-editor)
(package! org-web-tools)
;;(package! hackernews)
;;(package! osm)
#+END_SRC
* CONFIG.el
** General
*** Personal Information
#+BEGIN_SRC emacs-lisp


;; DO NOT EDIT THIS FILE! The configuration is done in Emacs.org.


(setq user-full-name "Simon Attila Weis"
      user-mail-address "me@siatwe.dev")
(setq calendar-latitude 47.73
      calendar-longitude 12.88)
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono" :size 20))
#+END_SRC
*** Theme And Transparency
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dracula)
(doom-themes-visual-bell-config)
(defvar siatwe/frame-transparency '(95 . 95))
(set-frame-parameter (selected-frame) 'alpha siatwe/frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,siatwe/frame-transparency))
#+END_SRC
*** Line Numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)

;; Disable line numbers for specific modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
*** Raise Performance
#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (* 3072 3072))
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC
*** Always Start Maximized
#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC
*** Highlight Line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC
*** Mouse Avoidance
#+BEGIN_SRC emacs-lisp
;;(mouse-avoidance-mode)
#+END_SRC
*** Fill Column
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC
** Org Mode
*** Defaults
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.org")
(setq org-ellipsis " ▾")
(require 'org-web-tools)
(require 'org-crypt)
(after! org
  (add-to-list 'org-modules 'org-habit))
(org-crypt-use-before-save-magic)
(setq calendar-week-start-day 1)
(setq org-tags-exclude-from-inheritance '("crypt"))

(defun siatwe/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  ;;:hook (org-mode . siatwe/org-mode-visual-fill)
  )

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(setq org-agenda-prefix-format '((agenda . "%i %-12:c%?-12t%b% s")
                                 (todo . " %i %-12:c")
                                 (tags . " %i %-12:c")
                                 (search . " %i %-12:c")))


(setq org-agenda-format-date (lambda (date) (concat "\n"
                                                    (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date))))

(setq org-agenda-span 100
      org-agenda-start-on-weekday nil
      org-agenda-start-day "-31d")
(setq org-log-done 'time)
#+END_SRC

** Eshell
#+BEGIN_SRC emacs-lisp
(evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history       )
;;(eshell-git-prompt-use-theme 'powerline)
#+END_SRC
** Packages
*** Evil
**** Normal paste behavior
#+BEGIN_SRC emacs-lisp
(use-package! evil
  :config
  (setq-default evil-kill-on-visual-paste nil)
  (setq evil-escape-key-sequence "jj")
  (setq evil-escape-delay 0.6))
#+END_SRC
**** Matchit
#+BEGIN_SRC emacs-lisp
(use-package! evil-matchit
  :config
  (global-evil-matchit-mode 1))
#+END_SRC
*** Key chord
#+BEGIN_SRC emacs-lisp
(use-package! key-chord
  :config
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "kk" 'yas-expand)
  (key-chord-define evil-normal-state-map "ge" 'next-error)
  (key-chord-define evil-normal-state-map "gE" 'previous-error)
  (key-chord-mode 1))
#+END_SRC
*** Git Auto Commit Mode
#+BEGIN_SRC emacs-lisp
(use-package! git-auto-commit-mode
  :config
  (setq-default gac-automatically-push-p t)
  (setq-default gac-automatically-add-new-files-p t))
#+END_SRC
** Functions
*** Minify JS or LESS
#+BEGIN_SRC emacs-lisp
(defun minify-js-or-less ()
  (interactive)
  (save-window-excursion
    ;; LESS
    (when (string= (file-name-extension buffer-file-name) "less")
      (async-shell-command
       (concat "lessc --no-color --clean-css " (projectile-project-root) "webroot/less/main.less "  (projectile-project-root) "webroot/less/main.css")))
    ;; JS
    (when (string= (file-name-extension buffer-file-name) "js")
      (async-shell-command
       (concat "yui-compressor " (projectile-project-root) "webroot/js/main.js -o "  (projectile-project-root) "webroot/js/main.min.js")))))

(add-hook 'after-save-hook 'minify-js-or-less)
#+END_SRC
*** Eshell

#+BEGIN_SRC emacs-lisp
(defun eshell-add-aliases ()
  "Eshell aliases"
  (dolist (var '(("ff" "find-file $1")
                 ("55" "cd /data/55/ $*")
                 ("53" "cd /data/53/ $*")
                 ("ytd" "youtube-dl --extract-audio --audio-format mp3 -i -o '%(title)s.%(ext)s' $1")
                 ("dotfiles" "/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $*")))
    (add-to-list 'eshell-command-aliases-list var)))

(add-hook 'eshell-post-command-hook 'eshell-add-aliases)
#+END_SRC
*** Download YT Video(s) as mp3
#+BEGIN_SRC emacs-lisp
(defun youtube-dl-via-id-to-mp3 (url)
  "Turn a youtube URL into a mp3 file. Works also for playlists."
  (interactive "sURL: ")
  (save-match-data
    (if (string-match
         "\\(?:\\.be/\\|v=\\|v%3D\\|^\\)\\([-_a-zA-Z0-9]\\{11\\}\\)" url)
        (async-shell-command
         (concat "youtube-dl --extract-audio --audio-format mp3 -i -o '%(title)s.%(ext)s' "
                 (match-string 1 url)))
      (message "This does not seem to be a valid Youtube URL."))))
#+END_SRC
** Key Mappings
*** Evil leader
#+BEGIN_SRC emacs-lisp
(map!

 :leader
 :desc "Elfeed"
 "ef" #'elfeed

 :leader
 :desc "Outline/Symbols"
 "es" #'lsp-treemacs-symbols

 :leader
 :desc "Decrypt entry"
 "ex" #'org-decrypt-entry

 :leader
 :desc "Adjust font size"
 "ea" #'+hydra/text-zoom/body

 :leader
 :desc "Launch app-launcher"
 "d" #'app-launcher-run-app

 :leader
 :desc "Maximize window"
 "em" #'maximize-window)
#+END_SRC


ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDO2GIgjDMOhraVFq7OkJivNLa9c09lvcKGNhhWzw2KBv9yeAPxStg0s7KrQ7oq9nNZZbtxLUm8x2STkDd11Qk7HufSaJmuCfYrjxKLjOikApwVnUHHjQzeg18VlAHu1ZJDxGdveVvO+OjliYcQ2Cdu+ebK7U8be4C00GIJG8ORqtsTxg3mp9LoKiz7m6nSq7ucwaRQyhLO2kL9Hco4mFuxrjOQ8h3whIA6lKd4NQ8GwT44eC/e+02CpZFBtwgJIDbRUD1IeNrn6qfLX7u+H7/uQ2JsU9Zm/BA7aBWDIB2ztQyknL2Q64ZzO+KfoL/FqSCU3GkmiNr9UoZu4sap586wfKZfCmBP8SSU4IQuDebphYR1g66x9H8uKpduSTI/Nask5sAJ6a/6Oju7mrZ5njgAvrWsohnNl55n9fIF6TqUrROZI9ma8MFvueKL5FenfpRFZYD48TiS+G/XpiZTvvv2vl10UXhYga5ijfw386Dri6cT5DduB+MNOOQQFv29GmU= u0_a383@localhost

#+TITLE: Emacs Configuration
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+STARTUP: fold

I use the Doom Emacs distribution. This way I don't have to worry about every
little thing and I can concentrate on the fun stuff.

Org-babel-tangle will generate the $DOOMDIR/{init.el, package.el, config.el}
files every time we save the file or call =M-x org-babel-tangle= manually.

* INIT.el
#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-


;; DO NOT EDIT THIS FILE! The configuration is done in Emacs.org.


(doom! :input
       ;;chinese
       ;;japanese
       ;;layout               ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe)  ; the ultimate code completion backend
       ;;helm                 ; the *other* search engine for love and life
       ;;ido                  ; the other *other* search engine...
       (ivy +fuzzy +icons +prescient) ; a search engine for love and life

       :ui
       ;;deft                 ; notational velocity for Emacs
       doom                   ; what makes DOOM look the way it does
       ;;doom-dashboard         ; a nifty splash screen for Emacs
       ;;doom-quit            ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column            ; a `fill-column' indicator
       hl-todo                ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides        ; highlighted indent columns
       ;;ligatures            ; ligatures and symbols to make your code pretty again
       ;;minimap              ; show a map of the code on the side
       (modeline +light)      ; snazzy, Atom-inspired modeline, plus API
       nav-flash              ; blink cursor line after big motions
       ;;neotree              ; a project drawer, like NERDTree for vim
       ophints                ; highlight the region an operation acts on
       (popup +defaults)      ; tame sudden yet inevitable temporary windows
       ;;tabs                 ; a tab bar for Emacs
       treemacs               ; a project drawer, like neotree but cooler
       ;;unicode              ; extended unicode support for various languages
       vc-gutter              ; vcs diff in the fringe
       vi-tilde-fringe        ; fringe tildes to mark beyond EOB
       ;;window-select        ; visually switch windows
       workspaces             ; tab emulation, persistence & separate workspaces
       zen                  ; distraction-free coding or writing

       :editor
       (evil +everywhere)     ; come to the dark side, we have cookies
       file-templates         ; auto-snippets for empty files
       fold                   ; (nigh) universal code folding
       format                 ; automated prettiness
       ;;god                  ; run Emacs commands without modifier keys
       ;;lispy                ; vim for lisp, for people who don't like vim
       multiple-cursors       ; editing in many places at once
       ;;objed                ; text object editing for the innocent
       ;;parinfer             ; turn lisp into python, sort of
       ;;rotate-text          ; cycle region at point between text candidates
       snippets               ; my elves. They type so I don't have to
       word-wrap              ; soft wrapping with language-aware indent

       :emacs
       dired                  ; making dired pretty [functional]
       electric               ; smarter, keyword-based electric-indent
       ibuffer                ; interactive buffer management
       undo                   ; persistent, smarter undo for your inevitable mistakes
       vc                     ; version-control and Emacs, sitting in a tree

       :term
       eshell                 ; the elisp shell that works everywhere
       ;;shell                ; simple shell REPL for Emacs
       ;;term                 ; basic terminal emulator for Emacs
       vterm                  ; the best terminal emulation in Emacs

       :checkers
       ;;syntax               ; tasing you for every semicolon you forget
       ;;(spell +aspell)        ; tasing you for misspelling mispelling
       ;;grammar              ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger             ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig         ; let someone else argue about tabs vs spaces
       ;;ein                  ; tame Jupyter notebooks with emacs
       (eval +overlay)        ; run code, run (also, repls)
       ;;gist                 ; interacting with github gists
       lookup                 ; navigate your code and its documentation
       (lsp +peek)
       magit                  ; a git porcelain for Emacs
       ;;make                 ; run make tasks from Emacs
       ;;pass                 ; password manager for nerds
       pdf                    ; pdf enhancements
       ;;prodigy              ; FIXME managing external services & code builders
       ;;rgb                  ; creating color strings
       ;;taskrunner           ; taskrunner for all your projects
       ;;terraform            ; infrastructure as code
       ;;tmux                 ; an API for interacting with tmux
       ;;upload               ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)   ; improve compatibility with macOS
       ;;tty                  ; improve the terminal Emacs experience

       :lang
       ;;agda                 ; types of types of types of types...
       ;;cc                   ; C/C++/Obj-C madness
       ;;clojure              ; java with a lisp
       ;;common-lisp          ; if you've seen one lisp, you've seen them all
       ;;coq                  ; proofs-as-programs
       ;;crystal              ; ruby at the speed of c
       ;;csharp               ; unity, .NET, and mono shenanigans
       ;;data                 ; config/data formats
       ;;(dart +flutter +lsp) ; paint ui and not much else
       ;;elixir               ; erlang done right
       ;;elm                  ; care for a cup of TEA?
       emacs-lisp             ; drown in parentheses
       ;;erlang               ; an elegant language for a more civilized age
       ;;ess                  ; emacs speaks statistics
       ;;faust                ; dsp, but you get to keep your soul
       ;;fsharp               ; ML stands for Microsoft's Language
       ;;fstar                ; (dependent) types and (monadic) effects and Z3
       ;;gdscript             ; the language you waited for
       ;;(go +lsp)            ; the hipster dialect
       ;;(haskell +dante)     ; a language that's lazier than I am
       ;;hy                   ; readability of scheme w/ speed of python
       ;;idris                ;
       ;;json                 ; At least it ain't XML
       ;;(java +meghanada)    ; the poster child for carpal tunnel syndrome
       (javascript +lsp)      ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia                ; a better, faster MATLAB
       ;;kotlin               ; a better, slicker Java(Script)
       ;;latex                ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger               ; an accounting system in Emacs
       ;;lua                  ; one-based indices? one-based indices
       markdown               ; writing docs for people to ignore
       ;;nim                  ; python + lisp at the speed of c
       ;;nix                  ; I hereby declare "nix geht mehr!"
       ;;ocaml                ; an objective camel
       (org +present)         ; organize your plain life in plain text
       (php +lsp)             ; perl's insecure younger brother
       ;;plantuml             ; diagrams for confusing people more
       ;;purescript           ; javascript, but functional
       ;;python               ; beautiful is better than ugly
       ;;qt                   ; the 'cutest' gui framework ever
       ;;racket               ; a DSL for DSLs
       ;;raku                 ; the artist formerly known as perl6
       ;;rest                 ; Emacs as a REST client
       ;;rst                  ; ReST in peace
       ;;(ruby +rails)        ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust                 ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala                ; java, but good
       ;;scheme               ; a fully conniving family of lisps
       sh                     ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity             ; do you need a blockchain? No.
       ;;swift                ; who asked for emoji variables?
       ;;terra                ; Earth and Moon in alignment for performance.
       web                  ; the tubes
       yaml                   ; JSON, but readable

       :email
       mu4e
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc                  ; how neckbeards socialize
       (rss +org)             ; emacs as an RSS reader
       ;;twitter              ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+END_SRC
* PACKAGES.el
Custom packages for which there is no embedding in Doom Emacs yet.
#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-


;; DO NOT EDIT THIS FILE! The configuration is done in Emacs.org.


(package! key-chord)
(package! lsp-treemacs)
(package! visual-fill-column)
(package! org-bullets)
(package! evil-matchit)
(package! mixed-pitch)
(package! tree-sitter)
(package! tree-sitter-langs)
(package! mpv)
(package! git-auto-commit-mode)
(package! mixed-pitch)
(package! anki-editor)
#+END_SRC
* CONFIG.el
** Auto-tangle configuration files
Stolen from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs From Scratch]] and customized to my needs :).
#+BEGIN_SRC emacs-lisp


;; DO NOT EDIT THIS FILE! The configuration is done in Emacs.org.


(defun siatwe/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name doom-private-dir))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'siatwe/org-babel-tangle-config)))
#+END_SRC
** General
*** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Simon Attila Weis"
      user-mail-address "me@siatwe.dev")
(setq calendar-latitude 47.73
      calendar-longitude 12.88)
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
(setq doom-variable-pitch-font (font-spec :family "DejaVu Sans" :size 20))
(setq doom-font (font-spec :family "Hack" :size 20))

(use-package! mixed-pitch
  :hook
  (text-mode . mixed-pitch-mode))
#+END_SRC
*** Theme And Transparency
#+BEGIN_SRC emacs-lisp
;; (use-package modus-themes
;;   :ensure
;;   :init
;;   (setq modus-themes-slanted-constructs t
;;         modus-themes-bold-constructs t)
;;   (modus-themes-load-themes)
;;   :config
;;   (modus-themes-load-vivendi)
;;   :bind ("<f5>" . modus-themes-toggle))

;; (setq visible-bell 1)

(setq doom-theme 'doom-dracula)
(doom-themes-visual-bell-config)

(defvar siatwe/frame-transparency '(95 . 95))
(set-frame-parameter (selected-frame) 'alpha siatwe/frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,siatwe/frame-transparency))
#+END_SRC
*** Line Numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)

;; Disable line numbers for specific modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
*** Raise Performance
#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (* 3072 3072))
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC
*** Always Start Maximized
#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC
*** Highlight Line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC
*** Mouse Avoidance
#+BEGIN_SRC emacs-lisp
;;(mouse-avoidance-mode)
#+END_SRC
*** Fill Column
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC
** Org Mode
*** Defaults
#+BEGIN_SRC emacs-lisp
(setq org-directory "/data/Cloud/Emacs/org")
(setq org-ellipsis " ▾")
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq calendar-week-start-day 1)
(setq org-tags-exclude-from-inheritance '("crypt"))

(defun siatwe/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  ;;:hook (org-mode . siatwe/org-mode-visual-fill)
  )

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                 (timeline . "  % s")
                                 (todo .
                                       " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
                                 (tags .
                                       " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
                                 (search . " %i %-12:c")))

(setq org-agenda-span 'month
      org-agenda-start-on-weekday nil
      org-agenda-start-day "0d")
(setq org-log-done 'time)
#+END_SRC
** Packages
*** Evil
**** Normal paste behavior
#+BEGIN_SRC emacs-lisp
(use-package! evil
  :config
  (setq-default evil-kill-on-visual-paste nil)
  (setq evil-escape-key-sequence "jj")
  (setq evil-escape-delay 0.6))
#+END_SRC
**** Matchit
#+BEGIN_SRC emacs-lisp
(use-package! evil-matchit
  :config
  (global-evil-matchit-mode 1))
#+END_SRC
*** Key chord
#+BEGIN_SRC emacs-lisp
(use-package! key-chord
  :config
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "kk" 'yas-expand)
  (key-chord-define evil-normal-state-map "ge" 'next-error)
  (key-chord-define evil-normal-state-map "gE" 'previous-error)
  (key-chord-mode 1))
#+END_SRC
*** LSP Mode
#+BEGIN_SRC emacs-lisp
(use-package! lsp-mode
  :config
  (setq lsp-idle-delay 0.500)
  (setq lsp-enable-file-watchers 1)
  (setq lsp-file-watch-threshold '99999)
  (setq lsp-ui-doc-enable nil))
#+END_SRC
*** Elfeed
#+BEGIN_SRC emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@2-weeks-ago"))
(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
(require 'elfeed)
(defun elfeed-v-mpv (url)
  "Watch a video from URL in MPV"
  (async-shell-command (format "mpv %s" (string-replace "=" "\\=" (string-replace "?" "\\?" url)))))

(defun elfeed-view-mpv (&optional use-generic-p)
  "Youtube-feed link"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (elfeed-v-mpv it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
(define-key elfeed-search-mode-map (kbd "v") 'elfeed-view-mpv)
#+END_SRC
*** LSP Treemacs
#+BEGIN_SRC emacs-lisp
(use-package! lsp-treemacs
  :config
  (lsp-treemacs-sync-mode 1))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package! projectile
  :config
  (setq projectile-project-search-path '("/data/55/" "/data/53/" "/data/Projects/")))
#+END_SRC
*** MPV
#+BEGIN_SRC emacs-lisp
(org-link-set-parameters "mpv" :follow #'mpv-play)

(defun org-mpv-complete-link (&optional arg)
  (replace-regexp-in-string
   "file:" "mpv:"
   (org-link-complete-file arg)
   t t))

(defun my:mpv/org-metareturn-insert-playback-position ()
  (when-let ((item-beg (org-in-item-p)))
    (when (and (not org-timer-start-time)
               (mpv-live-p)
               (save-excursion
                 (goto-char item-beg)
                 (and (not (org-invisible-p)) (org-at-item-timer-p))))
      (mpv-insert-playback-position t))))

(add-hook 'org-open-at-point-functions #'mpv-seek-to-position-at-point)
(add-hook 'org-metareturn-hook #'my:mpv/org-metareturn-insert-playback-position)
#+END_SRC
*** Tree Sitter
#+BEGIN_SRC emacs-lisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+END_SRC
*** Git Auto Commit Mode
#+BEGIN_SRC emacs-lisp
(use-package! git-auto-commit-mode
  :config
  (setq-default gac-automatically-push-p t)
  (setq-default gac-automatically-add-new-files-p t))
#+END_SRC
** Functions
*** Minify JS or LESS
#+BEGIN_SRC emacs-lisp
(defun minify-js-or-less ()
  (interactive)
  (save-window-excursion
    ;; LESS
    (when (string= (file-name-extension buffer-file-name) "less")
      (async-shell-command
       (concat "lessc --no-color --clean-css " (projectile-project-root) "webroot/less/main.less "  (projectile-project-root) "webroot/less/main.css")))
    ;; JS
    (when (string= (file-name-extension buffer-file-name) "js")
      (async-shell-command
       (concat "yui-compressor " (projectile-project-root) "webroot/js/main.js -o "  (projectile-project-root) "webroot/js/main.min.js")))))

(add-hook 'after-save-hook 'minify-js-or-less)
#+END_SRC
*** Eshell

#+BEGIN_SRC emacs-lisp
(defun eshell-add-aliases ()
  "Eshell aliases"
  (dolist (var '(("ff" "find-file $1")
                 ("55" "cd /data/55/ $*")
                 ("53" "cd /data/53/ $*")
                 ("dotfiles" "/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $*")))
    (add-to-list 'eshell-command-aliases-list var)))

(add-hook 'eshell-post-command-hook 'eshell-add-aliases)
#+END_SRC

** Key Mappings
*** Evil leader
#+BEGIN_SRC emacs-lisp
(map!

 :leader
 :desc "Elfeed"
 "ef" #'elfeed

 :leader
 :desc "Outline/Symbols"
 "es" #'lsp-treemacs-symbols

 :leader
 :desc "Decrypt entry"
 "ex" #'org-decrypt-entry

 :leader
 :desc "Adjust font size"
 "ea" #'+hydra/text-zoom/body

 :leader
 :desc "Maximize window"
 "em" #'maximize-window

 ;; Overwrite dooms defaults
 :leader
 :desc "Switch buffer"
 "bb" #'counsel-switch-buffer)
#+END_SRC
** Custom Lisp Files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+END_SRC

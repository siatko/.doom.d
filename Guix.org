#+TITLE: Guix

* System
#+BEGIN_SRC scheme :tangle ~/.config/guix/system.scm :mkdirp yes
(use-modules
 (gnu)
 (nongnu packages linux)
 (gnu packages version-control)
 (gnu packages emacs)
 (gnu packages gnome)
 (gnu packages linux)
 (gnu packages audio)
 (gnu packages pulseaudio)
 (gnu packages xorg)
 (gnu packages certs)
 (gnu packages wm)
 (gnu packages dunst)
 (gnu packages networking)
 (gnu packages ssh)
 (gnu packages terminals)
 (gnu packages xdisorg)
 (gnu packages vim))

(use-service-modules
 cups
 desktop
 dbus
 networking
 ssh
 xorg)

;; Allow members of the "video" group to change the screen brightness.
(define %backlight-udev-rule
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

;; Touchpad and keyboard configuration
(define %xorg-libinput-config
  "Section \"InputClass\"
  Identifier \"Touchpads\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsTouchpad \"on\"

  Option \"Tapping\" \"on\"
  Option \"TappingDrag\" \"on\"
  Option \"DisableWhileTyping\" \"on\"
  Option \"MiddleEmulation\" \"on\"
  Option \"ScrollMethod\" \"twofinger\"
EndSection
Section \"InputClass\"
  Identifier \"Keyboards\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsKeyboard \"on\"
EndSection
")

;; Sudoers file content
(define %sudoers-specification
  (plain-file "sudoers" "\
root ALL=(ALL) ALL
%wheel ALL=(ALL) NOPASSWD: ALL\n"))

(operating-system
 (kernel linux)
 (firmware (list linux-firmware))
 (locale "en_US.utf8")
 (timezone "Europe/Berlin")
 (keyboard-layout (keyboard-layout "de"))
 (host-name "cerebrum")
 (sudoers-file %sudoers-specification)
 (users (cons* (user-account
                (name "siatwe")
                (comment "Simon Attila Weis")
                (group "users")
                (home-directory "/home/siatwe")
                (supplementary-groups '(
                                        "wheel"     ;; sudo
                                        "netdev"    ;; network devices
                                        "kvm"
                                        "tty"
                                        "input"
                                        "lp"        ;; control bluetooth devices
                                        "audio"     ;; control audio devices
                                        "video")))  ;; control video devices

               %base-user-accounts))

 (packages (append (list
                    bspwm
                    sxhkd
                    rofi
                    dunst
                    polybar
                    alacritty
                    git
                    vim
                    emacs
                    bluez
                    bluez-alsa
                    pulseaudio
                    blueman
                    tlp
                    openssh
                    xf86-input-libinput
                    nss-certs     ;; for HTTPS access
                    gvfs)         ;; for user mounts
                   %base-packages))

 ;; Define all the needed services
 (services
  (append
   (list (service xfce-desktop-service-type)
         (service cups-service-type)
         (bluetooth-service #:auto-enable? #t)
         (simple-service 'dbus-extras
                         dbus-root-service-type
                         (list blueman))
         (set-xorg-configuration
          (xorg-configuration
           (keyboard-layout keyboard-layout)
           (extra-config (list %xorg-libinput-config)))))
   (modify-services %desktop-services
                    (elogind-service-type config =>
                                          (elogind-configuration (inherit config)
                                                                 (handle-lid-switch-external-power 'suspend)))
                    (udev-service-type config =>
                                       (udev-configuration (inherit config)
                                                           (rules (cons %backlight-udev-rule
                                                                        (udev-configuration-rules config))))))))

 (bootloader
  (bootloader-configuration
   (bootloader grub-efi-bootloader)
   (targets (list "/boot/efi"))
   (keyboard-layout keyboard-layout)))
 (swap-devices
  (list (swap-space
         (target
          ;; TODO: After fresh install copy the correct uuid from /etc/config.scm
          (uuid "892319e9-ebb3-4a86-835c-7222681672a0")))))
 (file-systems
  (cons* (file-system
          (mount-point "/boot/efi")
          (device (uuid "A578-3ECC" 'fat32))
          (type "vfat"))
         (file-system
          (mount-point "/")
          (device
           ;; TODO: After fresh install copy the correct uuid from /etc/config.scm
           (uuid "c0bb735a-9ca3-469a-96c0-4e9f0ada230a"
                 'ext4))
          (type "ext4"))
         %base-file-systems)))
#+END_SRC
* Channels
#+BEGIN_SRC scheme :tangle ~/.config/guix/channels.scm :mkdirp yes
(list (channel
       (name 'guix)
       (url "https://git.savannah.gnu.org/git/guix.git")
       (branch "master")
       (introduction
        (make-channel-introduction
         "9edb3f66fd807b096b48283debdcddccfea34bad"
         (openpgp-fingerprint
          "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
      (channel
       (name 'nonguix)
       (url "https://gitlab.com/nonguix/nonguix")
       (branch "master")
       (introduction
        (make-channel-introduction
         "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
         (openpgp-fingerprint
          "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5")))))
#+END_SRC
* Home
** Configuration
#+BEGIN_SRC scheme :tangle ~/.home-configuration/home-configuration.scm :mkdirp yes
(use-modules
 (gnu home)
 (gnu packages)
 (gnu services)
 (guix gexp)
 (gnu home services shells))

(home-environment
 (packages
  (map (compose list specification->package+output)
       (list "ncdu"
             "vim"
             "steam"
             "ripgrep"
             "fd"
             "font-jetbrains-mono"
             "font-hack"
             "font-overpass"
             "light"
             "gstreamer"
             "gst-plugins-ugly"
             "gst-plugins-bad"
             "ncurses"
             "zip"
             "unzip"
             "volctl"
             "flameshot"
             "flatpak"
             "wmname"
             "nyxt")))
 (services
  (list (service
         home-bash-service-type
         (home-bash-configuration
          ;;  (aliases
          ;;    '(("-- --color" . "auto")
          ;;      ("grep='grep --color" . "auto")
          ;;      ("ll" . "ls -l")
          ;;      ("ls='ls -p --color" . "auto")))
          (bashrc
           (list (local-file
                  "/home/siatwe/.home-configuration/.bashrc"
                  "bashrc")))
          (bash-profile
           (list (local-file
                  "/home/siatwe/.home-configuration/.bash_profile"
                  "bash_profile"))))))))
#+END_SRC
** Bash Profile
#+BEGIN_SRC bash :tangle ~/.home-configuration/.bash_profile :mkdirp yes
# Setups system and user profiles and related variables
# /etc/profile will be sourced by bash automatically
# Setups home environment profile
if [ -f ~/.profile ]; then source ~/.profile; fi

# Honor per-interactive-shell startup file
if [ -f ~/.bashrc ]; then source ~/.bashrc; fi
# Honor per-interactive-shell startup file
if [ -f ~/.bashrc ]; then . ~/.bashrc; fi

GUIX_PROFILE="/home/siatwe/.guix-profile"
. "$GUIX_PROFILE/etc/profile"
#+END_SRC
** Bashrc
#+BEGIN_SRC bash :tangle ~/.home-configuration/.bashrc :mkdirp yes
alias grep='grep --color="auto"'
alias ll="ls -l"
alias ls='ls -p --color="auto"'
# Bash initialization for interactive non-login shells and
# for remote shells (info "(bash) Bash Startup Files").

# Export 'SHELL' to child processes.  Programs such as 'screen'
# honor it and otherwise use /bin/sh.
export SHELL

if [[ $- != *i* ]]
then
    # We are being invoked from a non-interactive shell.  If this
    # is an SSH session (as in "ssh host command"), source
    # /etc/profile so we get PATH and other essential variables.
    [[ -n "$SSH_CLIENT" ]] && source /etc/profile

    # Don't do anything else.
    return
fi

# Source the system-wide file.
if [[ -e /etc/bashrc ]]; then
    source /etc/bashrc
fi

# Adjust the prompt depending on whether we're in 'guix environment'.
if [ -n "$GUIX_ENVIRONMENT" ]
then
    PS1='\u@\h \w [env]\$ '
else
    PS1='\u@\h \w\$ '
fi
alias ls='ls -p --color=auto'
alias ll='ls -l'
alias grep='grep --color=auto'
# Bash initialization for interactive non-login shells and
# for remote shells (info "(bash) Bash Startup Files").

# Export 'SHELL' to child processes.  Programs such as 'screen'
# honor it and otherwise use /bin/sh.
export SHELL

if [[ $- != *i* ]]
then
    # We are being invoked from a non-interactive shell.  If this
    # is an SSH session (as in "ssh host command"), source
    # /etc/profile so we get PATH and other essential variables.
    [[ -n "$SSH_CLIENT" ]] && source /etc/profile

    # Don't do anything else.
    return
fi

# Source the system-wide file.
source /etc/bashrc

# Adjust the prompt depending on whether we're in 'guix environment'.
if [ -n "$GUIX_ENVIRONMENT" ]
then
    PS1='\u@\h \w [env]\$ '
else
    PS1='\u@\h \w\$ '
fi
alias ls='ls -p --color=auto'
alias ll='ls -l'
alias grep='grep --color=auto'
#+END_SRC

#+TITLE: Guix
#+STARTUP: fold

* System
** bspwm
#+BEGIN_SRC scheme :tangle ~/.config/guix/system.scm :mkdirp yes
(use-modules
 (gnu)
 (gnu packages linux)
 (nongnu packages linux)
 (gnu packages version-control)
 (gnu packages gnome)
 (gnu packages audio)
 (gnu packages pulseaudio)
 (gnu packages xorg)
 (gnu packages certs)
 (gnu packages networking)
 (gnu packages ssh)
 (gnu packages terminals)
 (gnu packages xdisorg)
 (gnu packages vim)
 (gnu packages wm)
 (gnu packages compton)
 (gnu packages dunst)
 (srfi srfi-1))

(use-service-modules
 desktop
 dbus
 networking
 ;;sddm
 ssh
 xorg)

;; Allow members of the "video" group to change the screen brightness.
(define %backlight-udev-rule
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

;; Touchpad and keyboard configuration
(define %xorg-libinput-config
  "Section \"InputClass\"
  Identifier \"Touchpads\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsTouchpad \"on\"

  Option \"Tapping\" \"on\"
  Option \"TappingDrag\" \"on\"
  Option \"DisableWhileTyping\" \"on\"
  Option \"MiddleEmulation\" \"on\"
  Option \"ScrollMethod\" \"twofinger\"
EndSection
Section \"InputClass\"
  Identifier \"Keyboards\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsKeyboard \"on\"
EndSection
")

;; Sudoers file content
(define %sudoers-specification
  (plain-file "sudoers" "\
root ALL=(ALL) ALL
%wheel ALL=(ALL) NOPASSWD: ALL\n"))

(operating-system
 (kernel linux)
 (kernel-arguments '("loglevel=1,quiet"))
 (firmware (list linux-firmware))
 (locale "en_US.utf8")
 (timezone "Europe/Berlin")
 (keyboard-layout (keyboard-layout "de"))
 (host-name "cerebrum")
 (sudoers-file %sudoers-specification)
 (users (cons* (user-account
                (name "siatwe")
                (comment "Simon Attila Weis")
                (group "users")
                (home-directory "/home/siatwe")
                (supplementary-groups '(
                                        "wheel"     ;; sudo
                                        "netdev"    ;; network devices
                                        "kvm"
                                        "tty"
                                        "input"
                                        "lp"        ;; control bluetooth devices
                                        "audio"     ;; control audio devices
                                        "video")))  ;; control video devices

               %base-user-accounts))

 (packages (append (list
                    bspwm
                    sxhkd
                    polybar
                    rofi
                    picom
                    dunst
                    git
                    vim
                    bluez
                    bluez-alsa
                    blueman
                    pulseaudio
                    tlp
                    openssh
                    xf86-input-libinput
                    nss-certs     ;; for HTTPS access
                    gvfs)         ;; for user mounts
                   %base-packages))

 ;; Define all the needed services
 (services
  (append
   (list (service slim-service-type
                  (slim-configuration
                   ;;(theme
                   ;;  (theme-name "darky_pink"))
                   (default-user "siatwe")
                   (xorg-configuration
                    (xorg-configuration
                     (keyboard-layout keyboard-layout)
                     (extra-config (list %xorg-libinput-config))))))
         (bluetooth-service #:auto-enable? #t)
         (simple-service 'dbus-extras
                         dbus-root-service-type
                         (list blueman)))
   (remove (lambda (service)
             (eq? (service-kind service) gdm-service-type))
           (modify-services %desktop-services
                            (elogind-service-type config =>
                                                  (elogind-configuration (inherit config)
                                                                         (handle-lid-switch-external-power 'suspend)))
                            (udev-service-type config =>
                                               (udev-configuration (inherit config)
                                                                   (rules (cons %backlight-udev-rule
                                                                                (udev-configuration-rules config)))))))))

 (bootloader
  (bootloader-configuration
   (bootloader grub-efi-bootloader)
   (targets (list "/boot/efi"))
   (keyboard-layout keyboard-layout)))
 (swap-devices
  (list (swap-space
         (target
          ;; TODO: After fresh install copy the correct uuid from /etc/config.scm
          (uuid "e134618a-5227-4bda-ab2b-88b7003c2565")))))
 (file-systems
  (cons* (file-system
          (mount-point "/boot/efi")
          (device (uuid "224A-100F" 'fat32))
          (type "vfat"))
         (file-system
          (mount-point "/")
          (device
           ;; TODO: After fresh install copy the correct uuid from /etc/config.scm
           (uuid "ce6eea9b-908c-42c6-b1d9-b0fcf0e02b16"
                 'ext4))
          (type "ext4"))
         %base-file-systems)))
#+END_SRC
** Gnome + Wayland
#+BEGIN_SRC scheme
(use-modules
 (gnu)
 (gnu packages linux)
 (nongnu packages linux)
 (gnu packages version-control)
 (gnu packages gnome)
 (gnu packages audio)
 (gnu packages pulseaudio)
 (gnu packages xorg)
 (gnu packages certs)
 (gnu packages networking)
 (gnu packages ssh)
 (gnu packages terminals)
 (gnu packages xdisorg)
 (gnu packages vim)
 (srfi srfi-1))

(use-service-modules
 desktop
 dbus
 networking
 sddm
 ssh
 xorg)

;; Allow members of the "video" group to change the screen brightness.
(define %backlight-udev-rule
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

;; Touchpad and keyboard configuration
(define %xorg-libinput-config
  "Section \"InputClass\"
  Identifier \"Touchpads\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsTouchpad \"on\"

  Option \"Tapping\" \"on\"
  Option \"TappingDrag\" \"on\"
  Option \"DisableWhileTyping\" \"on\"
  Option \"MiddleEmulation\" \"on\"
  Option \"ScrollMethod\" \"twofinger\"
EndSection
Section \"InputClass\"
  Identifier \"Keyboards\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsKeyboard \"on\"
EndSection
")

;; Sudoers file content
(define %sudoers-specification
  (plain-file "sudoers" "\
root ALL=(ALL) ALL
%wheel ALL=(ALL) NOPASSWD: ALL\n"))

(operating-system
 (kernel linux)
 (kernel-arguments '("loglevel=1,quiet"))
 (firmware (list linux-firmware))
 (locale "en_US.utf8")
 (timezone "Europe/Berlin")
 (keyboard-layout (keyboard-layout "de"))
 (host-name "cerebrum")
 (sudoers-file %sudoers-specification)
 (users (cons* (user-account
                (name "siatwe")
                (comment "Simon Attila Weis")
                (group "users")
                (home-directory "/home/siatwe")
                (supplementary-groups '(
                                        "wheel"     ;; sudo
                                        "netdev"    ;; network devices
                                        "kvm"
                                        "tty"
                                        "input"
                                        "lp"        ;; control bluetooth devices
                                        "audio"     ;; control audio devices
                                        "video")))  ;; control video devices

               %base-user-accounts))

 (packages (append (list
                    git
                    vim
                    bluez
                    bluez-alsa
                    pulseaudio
                    tlp
                    openssh
                    xf86-input-libinput
                    nss-certs     ;; for HTTPS access
                    gvfs)         ;; for user mounts
                   %base-packages))

 ;; Define all the needed services
 (services
  (append
   (list (service gnome-desktop-service-type)
         (service sddm-service-type
                  (sddm-configuration
                   (display-server "wayland")
                   ;;(themes-directory "/usr/themes/sddm")
                   ;;(theme "maya")
                   ))
         (bluetooth-service #:auto-enable? #t)
         (simple-service 'dbus-extras
                         dbus-root-service-type
                         (list blueman))
         ;;https://gitgud.io/znavko/guix-configs/-/blob/master/config-gnome-wayland.scm
         ;;(set-xorg-configuration
         ;; (xorg-configuration
         ;;  (keyboard-layout keyboard-layout)
         ;;  (extra-config (list %xorg-libinput-config))))
         )
   (remove (lambda (service)
             (eq? (service-kind service) gdm-service-type))
           (modify-services %desktop-services
                            (elogind-service-type config =>
                                                  (elogind-configuration (inherit config)
                                                                         (handle-lid-switch-external-power 'suspend)))
                            (udev-service-type config =>
                                               (udev-configuration (inherit config)
                                                                   (rules (cons %backlight-udev-rule
                                                                                (udev-configuration-rules config)))))))))

 (bootloader
  (bootloader-configuration
   (bootloader grub-efi-bootloader)
   (targets (list "/boot/efi"))
   (keyboard-layout keyboard-layout)))
 (swap-devices
  (list (swap-space
         (target
          ;; TODO: After fresh install copy the correct uuid from /etc/config.scm
          (uuid "e134618a-5227-4bda-ab2b-88b7003c2565")))))
 (file-systems
  (cons* (file-system
          (mount-point "/boot/efi")
          (device (uuid "224A-100F" 'fat32))
          (type "vfat"))
         (file-system
          (mount-point "/")
          (device
           ;; TODO: After fresh install copy the correct uuid from /etc/config.scm
           (uuid "ce6eea9b-908c-42c6-b1d9-b0fcf0e02b16"
                 'ext4))
          (type "ext4"))
         %base-file-systems)))
#+END_SRC
* Channels
#+BEGIN_SRC scheme :tangle ~/.config/guix/channels.scm :mkdirp yes
(list (channel
       (name 'guix)
       (url "https://git.savannah.gnu.org/git/guix.git")
       (branch "master")
       (commit
        "056935506b8b5550ebeb3acfc1d0c3b4f11b6a2e")
       (introduction
        (make-channel-introduction
         "9edb3f66fd807b096b48283debdcddccfea34bad"
         (openpgp-fingerprint
          "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
      (channel
       (name 'nonguix)
       (url "https://gitlab.com/nonguix/nonguix")
       (branch "master")
       (commit
        "f93ee0b8b170ac5963c59a3c25ddb7f5ef242aaf")
       (introduction
        (make-channel-introduction
         "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
         (openpgp-fingerprint
          "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
      (channel
       (name 'flat)
       (url "https://github.com/flatwhatson/guix-channel.git")
       (introduction
        (make-channel-introduction
         "33f86a4b48205c0dc19d7c036c85393f0766f806"
         (openpgp-fingerprint
          "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490")))))
#+END_SRC
* Home
** Configuration
#+BEGIN_SRC scheme :tangle ~/.home-configuration/home-configuration.scm :mkdirp yes
(use-modules
 (gnu home)
 (gnu packages)
 (gnu services)
 (guix gexp)
 (gnu home services shells))

(home-environment
 (packages
  (map (compose list specification->package+output)
       (list "ncdu"
             "vim"
             "steam"
             "ripgrep"
             "fd"
             "font-jetbrains-mono"
             "font-hack"
             "font-overpass"
             "light"
             "gstreamer"
             "gst-plugins-ugly"
             "gst-plugins-bad"
             "ncurses"
             "zip"
             "unzip"
             "volctl"
             "flameshot"
             "flatpak"
             "wmname"
             "nyxt")))
 (services
  (list (service
         home-bash-service-type
         (home-bash-configuration
          ;;  (aliases
          ;;    '(("-- --color" . "auto")
          ;;      ("grep='grep --color" . "auto")
          ;;      ("ll" . "ls -l")
          ;;      ("ls='ls -p --color" . "auto")))
          (bashrc
           (list (local-file
                  "/home/siatwe/.home-configuration/.bashrc"
                  "bashrc")))
          (bash-profile
           (list (local-file
                  "/home/siatwe/.home-configuration/.bash_profile"
                  "bash_profile"))))))))
#+END_SRC
** Bash Profile
#+BEGIN_SRC bash :tangle ~/.home-configuration/.bash_profile :mkdirp yes
# Setups system and user profiles and related variables
# /etc/profile will be sourced by bash automatically
# Setups home environment profile
if [ -f ~/.profile ]; then source ~/.profile; fi

# Honor per-interactive-shell startup file
if [ -f ~/.bashrc ]; then source ~/.bashrc; fi
# Honor per-interactive-shell startup file
if [ -f ~/.bashrc ]; then . ~/.bashrc; fi

GUIX_PROFILE="/home/siatwe/.guix-profile"
. "$GUIX_PROFILE/etc/profile"
#+END_SRC
** Bashrc
#+BEGIN_SRC bash :tangle ~/.home-configuration/.bashrc :mkdirp yes
alias grep='grep --color="auto"'
alias ll="ls -l"
alias ls='ls -p --color="auto"'
# Bash initialization for interactive non-login shells and
# for remote shells (info "(bash) Bash Startup Files").

# Export 'SHELL' to child processes.  Programs such as 'screen'
# honor it and otherwise use /bin/sh.
export SHELL

if [[ $- != *i* ]]
then
    # We are being invoked from a non-interactive shell.  If this
    # is an SSH session (as in "ssh host command"), source
    # /etc/profile so we get PATH and other essential variables.
    [[ -n "$SSH_CLIENT" ]] && source /etc/profile

    # Don't do anything else.
    return
fi

# Source the system-wide file.
if [[ -e /etc/bashrc ]]; then
    source /etc/bashrc
fi

# Adjust the prompt depending on whether we're in 'guix environment'.
if [ -n "$GUIX_ENVIRONMENT" ]
then
    PS1='\u@\h \w [env]\$ '
else
    PS1='\u@\h \w\$ '
fi
alias ls='ls -p --color=auto'
alias ll='ls -l'
alias grep='grep --color=auto'
# Bash initialization for interactive non-login shells and
# for remote shells (info "(bash) Bash Startup Files").

# Export 'SHELL' to child processes.  Programs such as 'screen'
# honor it and otherwise use /bin/sh.
export SHELL

if [[ $- != *i* ]]
then
    # We are being invoked from a non-interactive shell.  If this
    # is an SSH session (as in "ssh host command"), source
    # /etc/profile so we get PATH and other essential variables.
    [[ -n "$SSH_CLIENT" ]] && source /etc/profile

    # Don't do anything else.
    return
fi

# Source the system-wide file.
source /etc/bashrc

# Adjust the prompt depending on whether we're in 'guix environment'.
if [ -n "$GUIX_ENVIRONMENT" ]
then
    PS1='\u@\h \w [env]\$ '
else
    PS1='\u@\h \w\$ '
fi
alias ls='ls -p --color=auto'
alias ll='ls -l'
alias grep='grep --color=auto'
#+END_SRC
* i3
** i3
#+BEGIN_SRC init i3/config
set $mod Mod4
font pango: JetBrainsMono 12
exec --no-startup-id dex --autostart --environment i3
exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork
exec --no-startup-id nm-applet
exec --no-startup-id blueman-applet
exec --no-startup-id copyq
exec --no-startup-id /usr/bin/gnome-keyring-daemon --start --components=secrets
exec --no-startup-id picom
exec --no-startup-id feh --bg-center ~/Pictures/Wallpaper/pa1.png
exec --no-startup-id sh ~/.screenlayout/work.sh
set $refresh_i3status killall -SIGUSR1 i3status
bindsym $mod+F2 exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5% && $refresh_i3status
bindsym $mod+F1 exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5% && $refresh_i3status
bindsym $mod+F3 exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status
floating_modifier $mod
bindsym $mod+Return exec gnome-terminal
bindsym $mod+Shift+Return exec google-chrome --password-store=gnome
bindsym $mod+Shift+q kill
# bindsym $mod+d exec dmenu_run -b
bindsym $mod+d exec rofi -show run
bindsym $mod+Shift+s exec --no-startup-id flameshot gui
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+odiaeresis focus right
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+odiaeresis move right
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
bindsym $mod+h split h
bindsym $mod+v split v
bindsym $mod+f fullscreen toggle
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+t layout toggle split
bindsym $mod+e exec --no-startup-id nautilus
bindsym $mod+Shift+space floating toggle
#bindsym $mod+space focus mode_toggle
bindsym $mod+space exec --no-startup-id copyq toggle
bindsym $mod+a focus parent
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10
bindsym $mod+Shift+c reload
bindsym $mod+Shift+r restart
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"
mode "resize" {
bindsym j resize shrink width 10 px or 10 ppt
bindsym k resize grow height 10 px or 10 ppt
bindsym l resize shrink height 10 px or 10 ppt
bindsym odiaeresis resize grow width 10 px or 10 ppt
bindsym Left resize shrink width 10 px or 10 ppt
bindsym Down resize grow height 10 px or 10 ppt
bindsym Up resize shrink height 10 px or 10 ppt
bindsym Right resize grow width 10 px or 10 ppt
bindsym Return mode "default"
bindsym Escape mode "default"
bindsym $mod+r mode "default"
}
bindsym $mod+r mode "resize"
# class                 border  bground text    indicator child_border
client.focused          #6272A4 #6272A4 #F8F8F2 #6272A4   #6272A4
client.focused_inactive #44475A #44475A #F8F8F2 #44475A   #44475A
client.unfocused        #282A36 #282A36 #BFBFBF #282A36   #282A36
client.urgent           #44475A #FF5555 #F8F8F2 #FF5555   #FF5555
client.placeholder      #282A36 #282A36 #F8F8F2 #282A36   #282A36
bar {
  separator_symbol "::"
  position top
  status_command i3status
  colors {
    background #282A36
    statusline #F8F8F2
    separator  #44475A

    focused_workspace  #44475A #44475A #F8F8F2
    active_workspace   #282A36 #44475A #F8F8F2
    inactive_workspace #282A36 #282A36 #BFBFBF
    urgent_workspace   #FF5555 #FF5555 #F8F8F2
    binding_mode       #FF5555 #FF5555 #F8F8F2
  }
}
default_border none
# floating enabled
for_window [class="terminal"] floating enable
for_window [class="Telegram"] floating enable
for_window [class="^.*"] border pixel 1
#+END_SRC
** i3status
#+BEGIN_SRC init
general {
        interval = 5
        output_format = "i3bar"
        colors = true
        color_good = "#50FA7B"
        color_degraded = "#F1FA8C"
        color_bad = "#FF5555"
}

order += "disk /"
order += "battery 0"
order += "memory"
order += "load"
order += "volume master"
order += "tztime local"
order += "tztime berlin"

volume master {
        format = "♪: %volume"
        format_muted = "♪: muted (%volume)"
        device = "default"
        mixer = "Master"
        mixer_idx = 0
}

battery 0 {
        format = "%status %percentage %remaining %emptytime"
        format_down = "No battery"
        status_chr = "CHR:"
        status_bat = "BAT:"
        status_unk = "UNK:"
        status_full = "100:"
        path = "/sys/class/power_supply/BAT%d/uevent"
        low_threshold = 10
}

run_watch DHCP {
        pidfile = "/var/run/dhclient*.pid"
}

run_watch VPNC {
        # file containing the PID of a vpnc process
        pidfile = "/var/run/vpnc/pid"
}

path_exists VPN {
        # path exists when a VPN tunnel launched by nmcli/nm-applet is active
        path = "/proc/sys/net/ipv4/conf/tun0"
}

tztime local {
        format = "%Y-%m-%d %H:%M"
        hide_if_equals_localtime = true
}

tztime berlin {
        format = "%Y-%m-%d %H:%M"
        timezone = "Europe/Berlin"
}

load {
        format = "CPU: %1min %5min %15min"
}

memory {
        format = "MEM: %used/%total"
        threshold_degraded = "10%"
        format_degraded = "MEM: %used/%total"
}

disk "/" {
        format = "SSD: %free"
}

read_file uptime {
        path = "/proc/uptime"
}
#+END_SRC
